package i5.las2peer.services.openAIService;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.http.HttpClient;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.logging.Level;
import org.apache.commons.io.IOUtils;
import javax.imageio.ImageIO;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import java.nio.file.Paths;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriBuilder;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringEscapeUtils;
import org.java_websocket.util.Base64;

import i5.las2peer.connectors.webConnector.client.ClientResponse;
import i5.las2peer.connectors.webConnector.client.MiniClient;
import i5.las2peer.api.Context;
import i5.las2peer.api.ManualDeployment;
import i5.las2peer.connectors.webConnector.client.MiniClient;
import i5.las2peer.api.logging.MonitoringEvent;
import i5.las2peer.api.security.UserAgent;
import i5.las2peer.logging.L2pLogger;
import i5.las2peer.restMapper.RESTService;
import i5.las2peer.restMapper.annotations.ServicePath;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import kotlin.contracts.Returns;
import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;
import net.minidev.json.parser.ParseException;
import net.minidev.json.JSONValue;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;

// TODO Describe your own service
/**
 * las2peer-Template-Service
 * 
 * This is a template for a very basic las2peer service that uses the las2peer WebConnector for RESTful access to it.
 * 
 * Note: If you plan on using Swagger you should adapt the information below in the SwaggerDefinition annotation to suit
 * your project. If you do not intend to provide a Swagger documentation of your service API, the entire Api and
 * SwaggerDefinition annotation should be removed.
 * 
 */
// TODO Adjust the following configuration
@Api
@SwaggerDefinition(
		info = @Info(
				title = "las2peer OpenAI Service",
				version = "1.0.0",
				description = "A las2peer wrapper service for the social-bot-manager service to make request to OpenAI API functions.",
				contact = @Contact(
						name = "Samuel Kwong",
						email = "samuel.kwong@rwth-aachen.de"),
				license = @License(
						name = "CC0",
						url = "https://github.com/rwth-acis/las2peer-openai-service/blob/main/LICENSE")))
@ServicePath("/openai")
// TODO Your own service class
public class OpenAIService extends RESTService {

	/*
	 * Template of a post function.
	 * 
	 * @return Returns the response generated from openAI
	*/
	@POST
	@Path("/personalize")
	@Produces(MediaType.APPLICATION_JSON)
	@ApiResponses(
			value = { @ApiResponse(
					code = HttpURLConnection.HTTP_OK,
					message = "Personalized response generated by OpenAI") })
	@ApiOperation(
			value = "personalize",
			notes = "Method that returns a response generated from openAI")
	public Response personalize(String body) {
		JSONParser parser = new JSONParser(JSONParser.MODE_PERMISSIVE);
		JSONObject jsonBody = null;
		JSONObject openaiBody = new JSONObject();
		JSONObject chatResponse = new JSONObject();
		HashMap<String, String> headers = new HashMap<String, String>();
		
		try {
			jsonBody = (JSONObject) parser.parse(body);
			// Get the system messages json array from the body, specified in the bot model
			JSONArray messagesJsonArray = (JSONArray) jsonBody.get("messages");
			// Get the conversation history from the body
			JSONArray conversationPathJsonArray = (JSONArray) jsonBody.get("conversationPath");
				
			String url = "https://api.openai.com/v1/chat/completions";
			MiniClient client = new MiniClient();
			client.setConnectorEndpoint(url);

			String openai_api_key = System.getenv("OPENAI_API_KEY");
			headers.put("Authorization", "Bearer " + openai_api_key);
			
			// TODO: Prepare openaiBody 
			
			ClientResponse r = client.sendRequest("POST", url,
					openaiBody.toJSONString(), MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, headers);

			JSONObject response = (JSONObject) parser.parse(r.getResponse());
			JSONArray choices = (JSONArray) response.get("choices");
			// System.out.println(choices);
			JSONObject choicesObj = (JSONObject) choices.get(0);
			JSONObject message = (JSONObject) choicesObj.get("message");
			// System.out.println(message);
			String textResponse = message.getAsString("content");
			// System.out.println(textResponse);
			chatResponse.put("text", textResponse);
		} catch (ParseException e) {
			e.printStackTrace();
			chatResponse.appendField("text", "An error has occurred.");
		}
		return Response.ok().entity(chatResponse).build();
	}
}
